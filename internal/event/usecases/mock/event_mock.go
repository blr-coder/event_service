// Code generated by MockGen. DO NOT EDIT.
// Source: event_service/internal/event/usecases (interfaces: IEventUseCase)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	usecase_models "event_service/internal/event/usecases/usecase_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEventUseCase is a mock of IEventUseCase interface.
type MockIEventUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIEventUseCaseMockRecorder
}

// MockIEventUseCaseMockRecorder is the mock recorder for MockIEventUseCase.
type MockIEventUseCaseMockRecorder struct {
	mock *MockIEventUseCase
}

// NewMockIEventUseCase creates a new mock instance.
func NewMockIEventUseCase(ctrl *gomock.Controller) *MockIEventUseCase {
	mock := &MockIEventUseCase{ctrl: ctrl}
	mock.recorder = &MockIEventUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventUseCase) EXPECT() *MockIEventUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIEventUseCase) Create(arg0 context.Context, arg1 *usecase_models.CreateEventInput) (*usecase_models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*usecase_models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIEventUseCaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIEventUseCase)(nil).Create), arg0, arg1)
}
